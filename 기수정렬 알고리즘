#include <stdio.h>
#include <stdlib.h>

// 최대값을 찾는 함수
int getMax(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++)
        if (arr[i] > max)
            max = arr[i];
    return max;
}

// 계수 정렬을 사용하는 함수
void countSort(int arr[], int n, int exp) {
    int output[n];
    int i, count[10] = {0};

    // count 배열에 각 자릿수의 빈도수 저장
    for (i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;

    // 실제 위치 계산을 위해 count[i]에 이전 위치의 합을 저장
    for (i = 1; i < 10; i++)
        count[i] += count[i - 1];

    // output 배열에 정렬된 값을 저장
    for (i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    // 정렬된 값을 원래 배열로 복사
    for (i = 0; i < n; i++)
        arr[i] = output[i];
}

// 기수 정렬 함수
void radixSort(int arr[], int n) {
    // 배열의 최대값을 찾음
    int m = getMax(arr, n);

    // 자릿수 단위로 정렬 수행
    for (int exp = 1; m / exp > 0; exp *= 10)
        countSort(arr, n, exp);
}

// 배열을 출력하는 함수
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {391, 582, 50, 134, 8, 924, 192};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    printf("원래 배열: \n");
    printArray(arr, n);

    radixSort(arr, n);

    printf("정렬된 배열: \n");
    printArray(arr, n);

    return 0;
}
