#include <stdio.h>

// 최대값을 반환하는 함수
int max(int a, int b) {
    return (a > b) ? a : b;
}

// 동적 계획법을 이용한 배낭채우기 함수
int knapsack(int capacity, int weights[], int values[], int n) {
    int dp[n+1][capacity+1];

    // dp 배열 초기화
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= capacity; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (weights[i-1] <= w)
                dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]);
            else
                dp[i][w] = dp[i-1][w];
        }
    }

    return dp[n][capacity];
}

int main() {
    int weights[] = {1, 2, 3}; // 물건들의 무게 배열
    int values[] = {6, 10, 12}; // 물건들의 가치 배열
    int capacity = 5; // 배낭의 최대 용량
    int n = sizeof(values) / sizeof(values[0]); // 물건의 수

    printf("배낭에 담을 수 있는 최대 가치 = %d\n", knapsack(capacity, weights, values, n));
    return 0;
}
